#!/bin/bash
# SPDX-License-Identifier: Apache-2.0
# Copyright 2020 Kirill 'kkm' Katsnelson

set -euo pipefail

# Without arguments, run apt-get to install all dependencies. This is the form
# used to build the local-cxx container to build stuff locally. Since it's
# intended for debugging build scripts mostly, apt lists are not trimmed, as
# it's usually done when building minimal containers, so that qick apt-get is
# available in an interactive debugging session.
#
# With the '-d', dumps a Dockerfile to stdout. This is invoked by make-cxx.sh to
# renerate the Dockerfile in ../cxx, the builder used for cloud build.
#
# Note that we only list build dependencies here. Runtime dependencies are
# installed into the VM images with a Daisy build script. Make sure they
# actually are. Every tarball we build with the cxx builder contains a file with
# the .SOMANIFEST extension that lists all lib*.so required by any executable or
# library file in the completed build.

# Needed for everything.
common_deps=(
  build-essential
  cmake
  gcc-8
  g++-8
  git
  libtool
  make
  pigz
  pkg-config
  procps
  python-minimal
  time
  unzip
  wget
  xxd
)

# User-provided dependencies, if any.
user_deps=()
[[ -f user-cxx.inc.sh ]] && . user-cxx.inc.sh

# For packaging deb files only, if needed. sdagent and fluent-bit need this.
dpkg_deps=(
  debhelper
  debian-keyring
  devscripts
  fakeroot
  libdistro-info-perl
)

# Kaldi, OpenFST etc. Looks like there are none.
kaldi_deps=(
)

# Slurm.
slurm_deps=(
  libcurl4-nss-dev
  libhwloc-dev
  libjson-c-dev
  liblz4-dev
  libmariadb-dev-compat
  libmunge-dev
  libncurses-dev
  libnuma-dev
  libreadline-dev
  zlib1g-dev
)
###libmysqlclient.so.20

# sdagent, makes a deb artifact. We do not buid it atm.
sdagent_deps=(
  autoconf
  automake
  flex
  libcurl4-nss-dev
  libmariadb-dev-compat
  libssl-dev
  libyajl-dev
  python-dev
  ${dpkg_deps[*]}
)

# fluent-bit deps. We do not build it atm.
fluentbit_deps=(
  ${dpkg_deps[*]}
)

all_deps=(
  ${common_deps[*]}
  ${user_deps[*]}
  ${kaldi_deps[*]}
  ${slurm_deps[*]}
# ${sdagent_deps[*]}
# ${fluentbit_deps[*]}
)

case ${1-} in
  '-x')
    # We're called from local-cxx/Dockerfile. Install dependencies.
    set -x
    DEBIAN_FRONTEND=noninteractive apt-get -qq install -y ${all_deps[*]} ;;

  '-d')
    # Called from update_cxx_builder.sh. Output to stdout a updated Dockerfile
    # for the cxx builer.
    cat <<EOF
# THIS FILE HAS BEEN AUTOGENERATED, DO NOT MODIFY IT DIRECTLY!
#
# This file is generated by the script '../local-cxx/setup.sh -d' which manages
# per-target dependencies for all builds that we run with the cxx (C/C++)
# toolchain.
#
# If you are a creating a PR, modify the file 'lib/build/local-cxx/setup.sh',
# then run lib/build/local-cxx/update_cxx_builder.sh to rewrite this file.
#
# If you want to add private dependencies only, add them to the user_deps
# array in the file etc/build/user-cxx.inc.sh, then also run
# lib/build/local-cxx/update_cxx_builder.sh to update this file,
#
# After any modification rebuild the cxx builder image with 'bm-build cxx'.
# The cxx bulder is unversioned, and won't be rebuilt automatically.

FROM debian:buster-slim
ENTRYPOINT ["/sbin/image-entrypoint"]
CMD []
COPY fsroot /
RUN set -x              &&    \\
  apt-get -qq update -y &&    \\
  DEBIAN_FRONTEND=noninteractive apt-get -qq install -y \\
EOF
    printf '      %-24s\\\n' ${all_deps[*]} | LC_ALL=C sort -u
    cat <<EOF
                        &&    \\
  rm -rf /var/lib/apt/lists/*
EOF
    ;;

  '')
    echo >&2 "You should not run this file, it's only invoked by other scripts."
    exit 1
    ;;

  *)
    echo >&2 "Invalid arguments ${@@Q}"
    exit 1
esac
