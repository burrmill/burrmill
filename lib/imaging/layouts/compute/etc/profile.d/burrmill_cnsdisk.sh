# SPDX-License-Identifier: Apache-2.0
# Copyright 2020 Kirill 'kkm' Katsnelson
#
# This file was installed by BurrMill.
#
# Adjust user or system environment when the CNS disk is mounted as /opt.
#
# Warning: bashisms ahead.
#
# This file is sourced from /etc/profile (by way of its location), and also
# explicitly from /usr/local/sbin/opt_postmount service, invoked early (even
# before the basic.target) to set up systemd system environment for units. In
# the latter case, the environment may be nearly empty, even PATH may not be yet
# fully constructed. Be careful when hacking this scriptlet: better do not
# invoke any external utilities at all, but if you do, invoke them by full path.
#
# In any case, this pure Bash implementation is about 10 times faster than an
# awk(1) one-liner. I had to clock it, since this file is on the critical path
# during boot. It's not a huge achievement in itself to speed it up an order of
# magnitude from 4ms with awk to 0.4ms without it on a calm and fast machine; I
# rather wanted to avoid a dependency on another program during boot, when the
# system partition is very busy.
#
# The CNS disk must have the file /opt/etc/environment, with lines of the form
#   export PATH=/opt/foo/bin:/opt/bar/bin:<...>:${PATH-}
# generated by the CNS assembly process. MANPATH is structured in a similar
# way. Other variables are regular export assignments, and aren't massaged here.
#
# If you are keen on using other shell than bash and this breaks when sourcing
# the profile, please send a PR, but keep in mind the critical path thing. It's
# you who pay for the boot time of every node, in the end. I'm not averse to
# having a different version for the user shell.
#
# The __opt_etc_environment_override is set only when this file is sourced by
# /usr/local/sbin/opt_postmount service to load /opt/etc/sysenvironment instead.
__env_file=${__opt_etc_environment_override:-/opt/etc/environment}

if [[ -r $__env_file ]]; then
  . $__env_file

  # De-duplicate a PATH-like variable named by $1. This script can be invoked
  # multiple times due to unit reload. Empty and duplicate entries are removed,
  # and the order of unique entries by their leftmost occurrence is maintained.
  __Dedup() {
    local -n var=$1   # Debian 10 comes with Bash 5.0; refvars added in 4.4.
    local -A seen=()
    local b bits i IFS=: pfx=${2-}  # $2 is for MANPATH to add the ':' prefix.

    [[ ! ${var+xxx} ]] && return    # Do nothing if referenced var is unbound.
    read -ra bits <<<"$var"
    for i in ${!bits[*]}; do
      b=${bits[$i]}
      [[ ! $b || ${seen[$b]-} ]] && unset bits[$i] || seen[$b]=y
    done
    var="$pfx${bits[*]}"
  }

  # Empty entries in PATH stand for the $PWD. This is usually frowned upon (and
  # rightly so), so we kill all empty entries, possible CNS assembly artifacts.
  __Dedup PATH

  # man(1), on the other hand, treats an empty entry to mean all system default
  # manual directories, so we slap a ':' at the path start.
  __Dedup MANPATH ':'

  unset -f __Dedup
fi

unset __env_file
